library(devtools)
devtools::document()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
library(CCs4prot)
library(igraph)
library(ggplot2)
library(stringr)
### Calculate CCs
incM_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/Test10x10matrix.txt"
rownames_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/peptideIDs_test"
colnames_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/proteinIDs_test"
incM <- readIncM(incM_filename=incM_filename
, colnames_filename=colnames_filename
, rownames_filename=rownames_filename)
incM
incM_RowFilter <- incM[-which(rowSums(incM)==1),]
is(incM_RowFilter)
incM_RowFilter
rm(incM_RowFilter)
exprTranscriptsFile <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/exprTranscriptsTest_bis.txt"
transcriptToProteinFile <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/proteinID_transcriptID_test.txt"
# Perform filtering
incM_filtered <- postHocFilter(incM
, exprTranscriptsFile=exprTranscriptsFile
, transcriptToProteinFile=transcriptToProteinFile
, tagContam="Contam"
, remove = "sharedOnly")
library(devtools)
devtools::document()
devtools::build()
devtools::install()
library(CCs4prot)
objects(n)
objects()
incM_filtered <- postHocFilter(incM
, exprTranscriptsFile=exprTranscriptsFile
, transcriptToProteinFile=transcriptToProteinFile
, tagContam="Contam"
, remove = "sharedOnly")
library(devtools)
devtools::document()
devtools::build()
devtools::install()
devtools::check()
library(CCs4prot)
library(igraph)
library(ggplot2)
library(stringr)
### Calculate CCs
incM_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/Test10x10matrix.txt"
rownames_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/peptideIDs_test"
colnames_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/proteinIDs_test"
incM <- readIncM(incM_filename=incM_filename
, colnames_filename=colnames_filename
, rownames_filename=rownames_filename)
incM_filtered <- postHocFilter(incM
, exprTranscriptsFile=exprTranscriptsFile
, transcriptToProteinFile=transcriptToProteinFile
, tagContam="Contam"
, remove = "sharedOnly")
exprTranscriptsFile <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/exprTranscriptsTest_bis.txt"
transcriptToProteinFile <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/proteinID_transcriptID_test.txt"
# Perform filtering
incM_filtered <- postHocFilter(incM
, exprTranscriptsFile=exprTranscriptsFile
, transcriptToProteinFile=transcriptToProteinFile
, tagContam="Contam"
, remove = "sharedOnly")
incM_filtered
incM=incM_filtered
rm(incM_filtered)
incM
objects()
incM_RowFilter <- incM[-which(rowSums(incM)==1),]
incM_RowFilter
is(incM_RowFilter)
if(methods::is(incM_RowFilter)[2]=="vector"){
incM_RowFilter <- t(as.matrix(incM_RowFilter))
rownames(incM_RowFilter) <- rownames(incM)[which(rowSums(incM)>1)]
}
incM_RowFilter
incM_RowColFilter <- incM_RowFilter[,-which(colSums(incM_RowFilter)==0)]
incM_RowColFilter
is(incM_RowColFilter)
if(methods::is(incM_RowColFilter)[2]=="vector"){
incM_RowColFilter <- t(as.matrix(incM_RowColFilter))
rownames(incM_RowColFilter) <- rownames(incM_RowFilter)
}
incM_RowColFilter
rm(incM, incM_RowColFilter, incM_RowColFilter)
rm(incM, incM_RowColFilter, incM_RowFilter)
incM_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/Test10x10matrix.txt"
rownames_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/peptideIDs_test"
colnames_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/proteinIDs_test"
incM <- readIncM(incM_filename=incM_filename
, colnames_filename=colnames_filename
, rownames_filename=rownames_filename)
incM
incM_RowFilter <- incM[-which(rowSums(incM)==1),]
incM_RowFilter
is(incM_RowFilter)
incM_RowColFilter <- incM_RowFilter[,-which(colSums(incM_RowFilter)==0)]
incM_RowColFilter
library(devtools)
devtools::document()
devtools::build()
devtools::check()
devtools::install()
library(CCs4prot)
library(igraph)
library(ggplot2)
incM_filename <- system.file( "extdata"
, "incM_Example"
, package = "CCs4prot"
, mustWork = TRUE)
rownames_filename <- system.file( "extdata"
, "peptideIDs_incM_Example"
, package = "CCs4prot"
, mustWork = TRUE)
colnames_filename <- system.file( "extdata"
, "proteinIDs_incM_Example"
, package = "CCs4prot"
, mustWork = TRUE)
incM <- readIncM(incM_filename=incM_filename
, colnames_filename=colnames_filename
, rownames_filename=rownames_filename)
incM_reduced <- reduceIncM(incM)
adjM <- getAdjM(incM_reduced)
multProteinCC <- getCC(adjM)
# Check number of multi-protein connected components
cc.multProteins <- multProteinCC$ccs
CCstatsOut <- CC.stats(incM = incM
, cc.proteins = cc.multProteins
, reducedIncM = T)
# Number of single-protein CCs:
CCstatsOut$N_singleProtCC
# Number of multi-protein CCs
CCstatsOut$N_multiProtCC
# Total number of CCs
totCCs <- CCstatsOut$N_singleProtCC+CCstatsOut$N_multiProtCC
totCCs
# Percentage of single-protein CCs:
PercSingleProt <- round(CCstatsOut$N_singleProtCC/totCCs*100, digits=2)
PercSingleProt
# View table of CC size distribution
CCstatsOut$NproteinsDistribution
# Plot CC size distribution
plot(factor(CCstatsOut$NproteinsDistribution$N_proteins
, levels=c("1","2", "3", "4", "5", "6", "7", "8", "9", "10", ">10"))
, as.numeric(as.vector(CCstatsOut$NproteinsDistribution$N_CC))
, type="s"
, xlab="N_proteins"
, ylab="N_CCs")
peptideStatsOut <- peptideStats(incM=incM)
cc.peptides.incM <- CC.composition(cc.multProteins, incM=incM)
exprTranscriptsFile <- system.file( "extdata"
, "ExpressedTranscripts.txt"
, package = "CCs4prot"
, mustWork = TRUE)
transcriptToProteinFile <- system.file( "extdata"
, "proteinToTranscript"
, package = "CCs4prot"
, mustWork = TRUE)
# Perform filtering
incM_filtered <- postHocFilter(incM
, exprTranscriptsFile=exprTranscriptsFile
, transcriptToProteinFile=transcriptToProteinFile
, tagContam="Contam"
, remove = "sharedOnly")
incM_filtered_reduced <- reduceIncM(incM_filtered)
#Calculate the adjacency matrix describing protein-to-protein connections by shared peptides.
adjM_filtered <- getAdjM(incM_filtered_reduced)
multProteinCC_filtered <- getCC(adjM_filtered)
# Save the list of vectors enumerating protein members in each connected
# component in the object cc.multProteins_filtered
cc.multProteins_filtered <- multProteinCC_filtered$ccs
# Calculate CCs size and % of single- vs multi-protein CCs obtained after transcriptome-informed filtering
CCstatsOut_filtered <- CC.stats(incM = incM_filtered
, cc.proteins = multProteinCC_filtered$ccs
, reducedIncM = T)
# Number of single-protein CCs:
CCstatsOut_filtered$N_singleProtCC
# Number of multi-protein CCs
CCstatsOut_filtered$N_multiProtCC
# Total number of CCs
totCCs_filtered <- CCstatsOut_filtered$N_singleProtCC+CCstatsOut_filtered$N_multiProtCC
totCCs_filtered
# Percentage of single-protein CCs:
PercSingleProt_filtered <- round(CCstatsOut_filtered$N_singleProtCC/totCCs_filtered*100, digits=2)
PercSingleProt_filtered
# View table of CC size distribution
CCstatsOut_filtered$NproteinsDistribution
# Plot CC size distribution
plot(factor(CCstatsOut_filtered$NproteinsDistribution$N_proteins
, levels=c("1","2", "3", "4", "5", "6", "7", "8", "9", "10", ">10"))
, as.numeric(as.vector(CCstatsOut_filtered$NproteinsDistribution$N_CC))
, type="s"
, xlab="N_proteins"
, ylab="N_CCs")
peptideStatsOut_filtered <- peptideStats(incM=incM_filtered)
comp <- as.data.frame(cbind(as.character(as.vector(c("before_filter"
, "after_filter")))
, as.numeric(as.vector(c(peptideStatsOut$nbShared
, peptideStatsOut_filtered$nbShared)))))
colnames(comp) <- c("Filter", "Perc_sharedPeptides")
comp
ggplot(data=comp, aes(x=as.factor(Filter), y=as.numeric(as.vector(Perc_sharedPeptides)))) +
geom_bar(stat="identity") +
theme_classic() +
xlab("") +
ylab("% shared peptides") +
ylim(0,100) +
coord_flip() +
geom_text(aes(label=as.numeric(as.vector(Perc_sharedPeptides))), hjust=1.5, color="white", size=4)
ymax <- max(max(CCstatsOut$NproteinsDistribution$N_CC)
, max(CCstatsOut_filt$NproteinsDistribution$N_CC))
exprTranscriptsFile <- system.file( "extdata"
, "ExpressedTranscripts.txt"
, package = "CCs4prot"
, mustWork = TRUE)
transcriptToProteinFile <- system.file( "extdata"
, "proteinToTranscript"
, package = "CCs4prot"
, mustWork = TRUE)
# Perform filtering
incM_filt <- postHocFilter(incM
, exprTranscriptsFile=exprTranscriptsFile
, transcriptToProteinFile=transcriptToProteinFile
, tagContam="Contam"
, remove = "sharedOnly")
incM_filt_reduced <- reduceIncM(incM_filt)
# Calculate the adjacency matrix describing protein-to-protein connections
adjM_filt <- getAdjM(incM_filt_reduced)
dim(adjM_filt) # check the size of the adjacency matrix
# Generate a graph of protein-to-protein connections by shared peptides and
# calculate its connected components (i.e. sets of proteins connected by shared
#peptides
multProteinCC_filt <- getCC(adjM_filt)
# Save the list of vectors enumerating protein members in each connected
# component in the object cc.multProteins_filtered
cc.multProteins_filt <- multProteinCC_filt$ccs
# Calculate CCs size and % of single- vs multi-protein CCs obtained after
# transcriptome-informed filtering
CCstatsOut_filt <- CC.stats(incM = incM_filt
, cc.proteins = multProteinCC_filt$ccs
, reducedIncM = T)
ymax <- max(max(CCstatsOut$NproteinsDistribution$N_CC)
, max(CCstatsOut_filt$NproteinsDistribution$N_CC))
ymax
max(CCstatsOut$NproteinsDistribution$N_CC
)
CCstatsOut$NproteinsDistribution$N_CC
ymax <- max(max(as.numeric(as.vector(CCstatsOut$NproteinsDistribution$N_CC)))
,max(as.numeric(as.vector(CCstatsOut_filt$NproteinsDistribution$N_CC))))
ymax
plot(factor(CCstatsOut$NproteinsDistribution$N_proteins
, levels=c("1","2", "3", "4", "5", "6", "7", "8", "9", "10", ">10"))
, as.numeric(as.vector(CCstatsOut$NproteinsDistribution$N_CC))
, type="s"
, xlab="N_proteins"
, ylab="N_CCs"
, ylim(0, ymax)
, main="before filtering")
plot(factor(CCstatsOut_filt$NproteinsDistribution$N_proteins
, levels=c("1","2", "3", "4", "5", "6", "7", "8", "9", "10", ">10"))
, as.numeric(as.vector(CCstatsOut_filt$NproteinsDistribution$N_CC))
, type="s"
, xlab="N_proteins"
, ylab="N_CCs"
, ylim(0, ymax)
, main="after filtering")
is(ymax)
ymax
help(plot)
library(CCs4prot)
library(igraph)
library(ggplot2)
incM_filename <- system.file( "extdata"
, "incM_Example"
, package = "CCs4prot"
, mustWork = TRUE)
rownames_filename <- system.file( "extdata"
, "peptideIDs_incM_Example"
, package = "CCs4prot"
, mustWork = TRUE)
colnames_filename <- system.file( "extdata"
, "proteinIDs_incM_Example"
, package = "CCs4prot"
, mustWork = TRUE)
incM <- readIncM(incM_filename=incM_filename
, colnames_filename=colnames_filename
, rownames_filename=rownames_filename)
tail(colnames(incM))
library(devtools)
library(devtools)
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::build()
devtools::install()
devtools::check()
devtools::check()
sessionInfo()
devtools::run_examples()
devtools::check()
devtools::check_rhub()
devtools::check_win_devel()
devtools::spell_check()
goodpractice::gp()
install.packages("goodpractice")
goodpractice::gp()
install.packages("inteRgrate")
help(vapply)
help(seq_len)
test=c(1,2,4)
seq_len(test)
seq_along(test)
1:length(test)
is(seq_along(test))
is(1:length(test))
help(seq_along)
library(CCs4prot)
library(igraph)
library(ggplot2)
incM_filename <- system.file( "extdata"
, "incM_Example"
, package = "CCs4prot"
, mustWork = TRUE)
rownames_filename <- system.file( "extdata"
, "peptideIDs_incM_Example"
, package = "CCs4prot"
, mustWork = TRUE)
colnames_filename <- system.file( "extdata"
, "proteinIDs_incM_Example"
, package = "CCs4prot"
, mustWork = TRUE)
incM <- readIncM(incM_filename = incM_filename
, colnames_filename = colnames_filename
, rownames_filename = rownames_filename)
incM_reduced <- reduceIncM(incM)
adjM <- getAdjM(incM_reduced)
multProteinCC <- getCC(adjM)
# Check number of multi-protein connected components
cc.multProteins <- multProteinCC$ccs
CCstatsOut <- CC.stats(incM = incM
, cc.proteins = cc.multProteins
, reducedIncM = TRUE)
# Number of single-protein CCs:
CCstatsOut$N_singleProtCC
# Number of multi-protein CCs
CCstatsOut$N_multiProtCC
# Total number of CCs
totCCs <- CCstatsOut$N_singleProtCC+CCstatsOut$N_multiProtCC
totCCs
# Percentage of single-protein CCs:
PercSingleP <- round(CCstatsOut$N_singleProtCC/totCCs*100, digits = 2)
PercSingleP
# View table of CC size distribution
CCstatsOut$NproteinsDistribution
peptideStatsOut <- peptideStats(incM = incM)
# Number of shared peptides
peptideStatsOut$nbShared
# Number of specific peptides
peptideStatsOut$nbSpecific
cc.peptides.incM <- CC.composition(cc.multProteins, incM = incM)
prot <- "ENSP261"
cc.proteins = cc.multProteins
cc.subincM = cc.peptides.incM$cc.subincM
tagProt = "ENSP"
tagContam = "Contam"
res <- lapply(cc.proteins, function(cc.proteins) grep(prot, cc.proteins))
res
cc_id <- which(vapply(res, function(x) length(x) > 0))
cc_id <- which(sapply(res, function(x) length(x) > 0))
cc_id
help("vapply")
is(cc_id)
help(fivenum)
is(res)
cc_id <- which(lapply(res, function(x) length(x) > 0))
lapply(res, function(x) length(x) > 0)
which(sapply(res, function(x) length(x) > 0))
which(vapply(res, function(x) length(x) > 0, FUN.VALUE = as.logical()))
which(vapply(res, function(x) length(x) > 0, FUN.VALUE = is.logical()))
which(vapply(res, function(x) length(x) > 0, FUN.VALUE = logical()))
vapply(res, function(x) length(x) > 0, FUN.VALUE = logical())
res
length(res[[1]])
is(length(res[[1]]))
length(res[[1]])>0
is(length(res[[1]])>0)
is(res)
lapply(res, function(x) length(x) > 0)
unlis(lapply(res, function(x) length(x) > 0))
unlist(lapply(res, function(x) length(x) > 0))
which(unlist(lapply(res, function(x) length(x) > 0)))
devtools::document()
devtools::build()
devtools::check()
install.packages("remotes")
remotes::install_github("jumpingrivers/inteRgrate")
install.packages("remotes")
devtools::install()
library("inteRgrate")
library("remotes")
remotes::install_github("jumpingrivers/inteRgrate")
library(inteRgrate)
inteRgrate::check_pkg()
proteinToTranscript <- read.table(file="H:/Documents/Code/CCs4prot/CCs4prot/inst/extdata/proteinToTranscript"
, sep="\t"
, header=FALSE)
proteinIDs <- data.table::fread(file = "H:/Documents/Code/CCs4prot/CCs4prot/inst/extdata/proteinIDs_incM_Example"
, sep = "\n"
, header = FALSE
, data.table = FALSE)
proteinIDs <- proteinIDs$V1
exprTranscripts <- scan(file="H:/Documents/Code/CCs4prot/CCs4prot/inst/extdata/ExpressedTranscripts.txt"
, what=character())
head(proteinToTranscript)
head(proteinIDs)
write.table(file="H:/Documents/Code/TestSizeProteinToTranscript", proteinToTranscript[,3:4], col.names = F, row.names = F, quote=F)
prots_keep <- proteinToTranscript[which(proteinToTranscript$V3 %in% proteinIDs),]
trans_keep <- proteinToTranscript[which(proteinToTranscript$V4 %in% exprTranscripts),]
keep <- rbind(prots_keep, trans_keep)
dim(prots_keep)
dim(trans_keep)
dim(keep)
dim(unique(keep))
head(keep)
length(proteinToTranscript$V3)
length(proteinIDs)
length(exprTranscripts)
is(prots_keep)
is(trans_keep)
is(keep)
head(prots_keep)
head(trans_keep)
head(keep)
rm(keep)
dim(rbind(rbind(prots_keep, trans_keep)))
dim(prots_keep)
dim(trans_keep)
991+100
prots_keep <- proteinToTranscript[which(proteinToTranscript$V3 %in% proteinIDs),]
trans_keep <- proteinToTranscript[which(proteinToTranscript$V4 %in% exprTranscripts),]
keep <- rbind(prots_keep, trans_keep)
keep <- unique(keep)
dim(keep)
length(keep$V1)
length(unique(keep$V1))
write.table(file="H:/Documents/Code/SmallerProteinToTranscript", keep, col.names = F, row.names = F, quote=F)
head(keep)
keep <- unique(keep[,3:4])
write.table(file="H:/Documents/Code/SmallerProteinToTranscript", keep, col.names = F, row.names = F, quote=F)
dim(keep)
head(keep)
proteinToTranscript <- read.table(file="H:/Documents/Code/CCs4prot/CCs4prot/inst/extdata/proteinToTranscript"
, sep="\t"
, header=FALSE)
#write.table(file="H:/Documents/Code/TestSizeProteinToTranscript", proteinToTranscript[,3:4], col.names = F, row.names = F, quote=F)
proteinIDs <- data.table::fread(file = "H:/Documents/Code/CCs4prot/CCs4prot/inst/extdata/proteinIDs_incM_Example"
, sep = "\n"
, header = FALSE
, data.table = FALSE)
proteinIDs <- proteinIDs$V1
exprTranscripts <- scan(file="H:/Documents/Code/CCs4prot/CCs4prot/inst/extdata/ExpressedTranscripts.txt"
, what=character())
prots_keep <- proteinToTranscript[which(proteinToTranscript$V3 %in% proteinIDs),]
trans_keep <- proteinToTranscript[which(proteinToTranscript$V4 %in% exprTranscripts),]
keep <- rbind(prots_keep, trans_keep)
keep <- unique(keep[,3:4])
write.table(file="H:/Documents/Code/SmallerProteinToTranscript", keep, sep= "\t", col.names = F, row.names = F, quote=F)
proteinToTranscript <- read.table(file="H:/Documents/Code/CCs4prot/CCs4prot/inst/extdata/proteinToTranscript"
, sep="\t"
, header=FALSE)
head(proteinToTranscript)
proteinToTranscript <- read.table(file="H:/Documents/Code/CCs4prot/CCs4prot/inst/extdata/proteinToTranscript"
, sep=" "
, header=FALSE)
head(proteinToTranscript)
dim(proteinToTranscript)
write.table(file="H:/Documents/Code/SmallerProteinToTranscript", proteinToTranscript, sep= "\t", col.names = F, row.names = F, quote=F)
devtools::document()
devtools::document()
devtools::build()
devtools::install()
devtools::document()
devtools::build()
devtools::install()
devtools::check()
library(usethis)
usethis::use_testthat
usethis::use_testthat()
rhub::check_for_cran()
install.packages("rcmdcheck")
rcmdcheck::rcmdcheck(args = "--as-cran")
rcmdcheck::rcmdcheck(args = "--as-cran")
library(devtools)
devtools::document()
devtools::build()
devtools::install()
