, " in CC #"
, subgraphCC_beforeFilter$cc_id
, " before filtering")
, line = -1)
plot.igraph(subgraphCC_afterFilter$g, layout = layout_as_bipartite,
edge.width = 1,
edge.arrow.width = 0.3,
vertex.size = 35,
edge.arrow.size = 0.5,
vertex.size2 = 35,
vertex.label.cex = 0.7,
asp = 0.45,
margin = -0.1) +
title(paste0("Protein "
, prot, " in CC #"
, subgraphCC_beforeFilter$cc_id
, " after filtering")
, line = -1)
cc.peptides.incM <- CC.composition(cc.multProteins, incM=incM)
subgraphCC_beforeFilter <- plotCCs(prot="ENSP05"
, cc.proteins=cc.multProteins
, cc.subincM=cc.peptides.incM$cc.subincM
, incM=incM
, tagContam="Contam")
subgraphCC_afterFilter <- plotCCs(prot="ENSP05"
, cc.proteins=cc.multProteins_filtered
, cc.subincM=cc.peptides.incM_filtered$cc.subincM
, incM=incM_filtered
, tagContam="Contam")
par(mfrow=c(2,1))
plot.igraph(subgraphCC_beforeFilter$g, layout = layout_as_bipartite,
edge.width = 1,
edge.arrow.width = 0.3,
vertex.size = 35,
edge.arrow.size = 0.5,
vertex.size2 = 35,
vertex.label.cex = 0.7,
asp = 0.45,
margin = -0.1) +
title(paste0("Protein "
, prot
, " in CC #"
, subgraphCC_beforeFilter$cc_id
, " before filtering")
, line = -1)
plot.igraph(subgraphCC_afterFilter$g, layout = layout_as_bipartite,
edge.width = 1,
edge.arrow.width = 0.3,
vertex.size = 35,
edge.arrow.size = 0.5,
vertex.size2 = 35,
vertex.label.cex = 0.7,
asp = 0.45,
margin = -0.1) +
title(paste0("Protein "
, prot, " in CC #"
, subgraphCC_beforeFilter$cc_id
, " after filtering")
, line = -1)
t="remove"
is(t)
remove=T
!((methods::is(remove)[1] == "character")|(methods::is(remove)[2] == "vector"))
is(remove)
((!(methods::is(tagContam)[1] == "character")|(!(methods::is(tagContam)[2] == "vector"))))
tagContam=1
((!(methods::is(tagContam)[1] == "character")|(!(methods::is(tagContam)[2] == "vector"))))
tagContam=TRUE
((!(methods::is(tagContam)[1] == "character")|(!(methods::is(tagContam)[2] == "vector"))))
tagContam="via"
((!(methods::is(tagContam)[1] == "character")|(!(methods::is(tagContam)[2] == "vector"))))
help("grep")
remove
remove=="all"
remove!="all"
((remove!="all")&(remove!="sharedOnly")&(remove!="sharedNoRemove"))
((remove!="all")&(remove!="sharedOnly")&(remove!="TRUE"))
((remove!="all")&(remove!="sharedOnly")&(remove!=TRUE))
devtools::load_all(".")
devtools::load_all(".")
incM_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/Test10x10matrix.txt"
rownames_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/peptideIDs_test"
colnames_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/proteinIDs_test"
incM <- readIncM(incM_filename=incM_filename
, colnames_filename=colnames_filename
, rownames_filename=rownames_filename)
exprTranscriptsFile <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/exprTranscriptsTest_bis.txt"
transcriptToProteinFile <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/proteinID_transcriptID_test.txt"
# Perform filtering
incM_filtered <- postHocFilter(incM
, exprTranscriptsFile=exprTranscriptsFile
, transcriptToProteinFile=transcriptToProteinFile
, tagContam="Contam"
, remove = "sharedOnly")
devtools::load_all(".")
transcriptToProteinFile <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/proteinID_transcriptID_test.txt"
# Perform filtering
incM_filtered <- postHocFilter(incM
, exprTranscriptsFile=exprTranscriptsFile
, transcriptToProteinFile=transcriptToProteinFile
, tagContam="Contam"
, remove = "sharedOnly")
incM_filtered
transcriptToProteinFile <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/proteinID_transcriptID_test.txt"
# Perform filtering
incM_filtered2 <- postHocFilter(incM
, exprTranscriptsFile=exprTranscriptsFile
, transcriptToProteinFile=transcriptToProteinFile
, tagContam="Contam"
, remove = "sharedNoRemove")
exprTranscripts <- scan(file=exprTranscriptsFile, what=character())
## Read tab-delimited file containing Ensembl transcript ID to Ensembl protein ID
## conversion
transcriptToProtein <- utils::read.table(file=transcriptToProteinFile, sep="\t", header=F)
colnames(transcriptToProtein) <- c("Protein", "Transcript")
## Convert IDs of expressed transcript into the corresponding protein IDs
exprProteins <- as.character(as.vector(transcriptToProtein[transcriptToProtein$Transcript %in% exprTranscripts,]$Protein))
## Identify contaminant proteins
proteinContam <- colnames(incM)[grep("Contam", colnames(incM))]
exprProteins
exprTranscripts
proteinContam
colnames(incM)
setdiff(colnames(incM), c(exprProteins, proteinContam))
noTranscript <- setdiff(colnames(incM), c(exprProteins, proteinContam))
noTranscript
incM_noTranscriptFilter <- incM[,-which(colnames(incM) %in% noTranscript)]
incM_noTranscriptFilter
incM
exprProteins
peptidesRemoved <- which(rowSums(incM_noTranscriptFilter)==0)
peptidesRemoved
prots_peptidesRemoved <- which(colSums(incM[peptidesRemoved,])==1)
prots_peptidesRemoved
prots_peptidesRemoved <- which(colSums(incM[peptidesRemoved,])>0)
prots_peptidesRemoved
noTranscript_keep <- colnames(incM)[prots_peptidesRemoved]
noTranscript_keep
noKeep <- setdiff(noTranscripts, noTranscript_keep)
noKeep <- setdiff(noTranscript, noTranscript_keep)
noKeep
noTranscript
incM_filtered <- incM_filtered[,-which(colnames(incM) %in% noKeep)]
incM_filtered
noTranscript_keep
noTranscript_keep
noTranscript
noKeep
incM_filtered <- incM[,-which(colnames(incM) %in% noKeep)]
incM_filtered
devtools::load_all(".")
transcriptToProteinFile <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/proteinID_transcriptID_test.txt"
# Perform filtering
incM_filtered <- postHocFilter(incM
, exprTranscriptsFile=exprTranscriptsFile
, transcriptToProteinFile=transcriptToProteinFile
, tagContam="Contam"
, remove = "sharedNoRemove")
incM_filtered
transcriptToProteinFile <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/proteinID_transcriptID_test.txt"
# Perform filtering
incM_filtered <- postHocFilter(incM
, exprTranscriptsFile=exprTranscriptsFile
, transcriptToProteinFile=transcriptToProteinFile
, tagContam="Contam"
, remove = "sharedOnly")
incM_filtered
transcriptToProteinFile <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/proteinID_transcriptID_test.txt"
# Perform filtering
incM_filtered <- postHocFilter(incM
, exprTranscriptsFile=exprTranscriptsFile
, transcriptToProteinFile=transcriptToProteinFile
, tagContam="Contam"
, remove = "all")
incM_filtered
library(devtools)
devtools::build()
devtools::check()
devtools::build()
.Last.error.trace
devtools::build()
library(devtools)
getwd()
devtools::build()
devtools::load_all(".")
incM_filename <- system.file( "extdata"
, "incM_Example"
, package = "CCs4prot"
, mustWork = TRUE)
rownames_filename <- system.file( "extdata"
, "peptideIDs_incM_Example"
, package = "CCs4prot"
, mustWork = TRUE)
colnames_filename <- system.file( "extdata"
, "proteinIDs_incM_Example"
, package = "CCs4prot"
, mustWork = TRUE)
incM <- readIncM(incM_filename=incM_filename
, colnames_filename=colnames_filename
, rownames_filename=rownames_filename)
devtools::build()
detach("package:CCs4prot", unload = TRUE)
devtools::build()
.Last.error.trace
devtools::build()
library(devtools)
devtools::document()
devtools::build()
devtools::check()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
devtools::document()
devtools::build()
devtools::check()
library(CCs4prot)
library(igraph)
library(ggplot2)
library(stringr)
### Calculate CCs
incM_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/Test10x10matrix.txt"
rownames_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/peptideIDs_test"
colnames_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/proteinIDs_test"
incM <- readIncM(incM_filename=incM_filename
, colnames_filename=colnames_filename
, rownames_filename=rownames_filename)
incM
incM_RowFilter <- incM[-which(rowSums(incM)==1),]
is(incM_RowFilter)
incM_RowFilter
rm(incM_RowFilter)
exprTranscriptsFile <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/exprTranscriptsTest_bis.txt"
transcriptToProteinFile <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/proteinID_transcriptID_test.txt"
# Perform filtering
incM_filtered <- postHocFilter(incM
, exprTranscriptsFile=exprTranscriptsFile
, transcriptToProteinFile=transcriptToProteinFile
, tagContam="Contam"
, remove = "sharedOnly")
library(devtools)
devtools::document()
devtools::build()
devtools::install()
library(CCs4prot)
objects(n)
objects()
incM_filtered <- postHocFilter(incM
, exprTranscriptsFile=exprTranscriptsFile
, transcriptToProteinFile=transcriptToProteinFile
, tagContam="Contam"
, remove = "sharedOnly")
library(devtools)
devtools::document()
devtools::build()
devtools::install()
devtools::check()
library(CCs4prot)
library(igraph)
library(ggplot2)
library(stringr)
### Calculate CCs
incM_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/Test10x10matrix.txt"
rownames_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/peptideIDs_test"
colnames_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/proteinIDs_test"
incM <- readIncM(incM_filename=incM_filename
, colnames_filename=colnames_filename
, rownames_filename=rownames_filename)
incM_filtered <- postHocFilter(incM
, exprTranscriptsFile=exprTranscriptsFile
, transcriptToProteinFile=transcriptToProteinFile
, tagContam="Contam"
, remove = "sharedOnly")
exprTranscriptsFile <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/exprTranscriptsTest_bis.txt"
transcriptToProteinFile <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/proteinID_transcriptID_test.txt"
# Perform filtering
incM_filtered <- postHocFilter(incM
, exprTranscriptsFile=exprTranscriptsFile
, transcriptToProteinFile=transcriptToProteinFile
, tagContam="Contam"
, remove = "sharedOnly")
incM_filtered
incM=incM_filtered
rm(incM_filtered)
incM
objects()
incM_RowFilter <- incM[-which(rowSums(incM)==1),]
incM_RowFilter
is(incM_RowFilter)
if(methods::is(incM_RowFilter)[2]=="vector"){
incM_RowFilter <- t(as.matrix(incM_RowFilter))
rownames(incM_RowFilter) <- rownames(incM)[which(rowSums(incM)>1)]
}
incM_RowFilter
incM_RowColFilter <- incM_RowFilter[,-which(colSums(incM_RowFilter)==0)]
incM_RowColFilter
is(incM_RowColFilter)
if(methods::is(incM_RowColFilter)[2]=="vector"){
incM_RowColFilter <- t(as.matrix(incM_RowColFilter))
rownames(incM_RowColFilter) <- rownames(incM_RowFilter)
}
incM_RowColFilter
rm(incM, incM_RowColFilter, incM_RowColFilter)
rm(incM, incM_RowColFilter, incM_RowFilter)
incM_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/Test10x10matrix.txt"
rownames_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/peptideIDs_test"
colnames_filename <- "/home/laura/Documents/Work/WorkCEA/DiskH/Code/proteinIDs_test"
incM <- readIncM(incM_filename=incM_filename
, colnames_filename=colnames_filename
, rownames_filename=rownames_filename)
incM
incM_RowFilter <- incM[-which(rowSums(incM)==1),]
incM_RowFilter
is(incM_RowFilter)
incM_RowColFilter <- incM_RowFilter[,-which(colSums(incM_RowFilter)==0)]
incM_RowColFilter
library(devtools)
devtools::document()
devtools::build()
devtools::check()
devtools::install()
library(CCs4prot)
library(igraph)
library(ggplot2)
incM_filename <- system.file( "extdata"
, "incM_Example"
, package = "CCs4prot"
, mustWork = TRUE)
rownames_filename <- system.file( "extdata"
, "peptideIDs_incM_Example"
, package = "CCs4prot"
, mustWork = TRUE)
colnames_filename <- system.file( "extdata"
, "proteinIDs_incM_Example"
, package = "CCs4prot"
, mustWork = TRUE)
incM <- readIncM(incM_filename=incM_filename
, colnames_filename=colnames_filename
, rownames_filename=rownames_filename)
incM_reduced <- reduceIncM(incM)
adjM <- getAdjM(incM_reduced)
multProteinCC <- getCC(adjM)
# Check number of multi-protein connected components
cc.multProteins <- multProteinCC$ccs
CCstatsOut <- CC.stats(incM = incM
, cc.proteins = cc.multProteins
, reducedIncM = T)
# Number of single-protein CCs:
CCstatsOut$N_singleProtCC
# Number of multi-protein CCs
CCstatsOut$N_multiProtCC
# Total number of CCs
totCCs <- CCstatsOut$N_singleProtCC+CCstatsOut$N_multiProtCC
totCCs
# Percentage of single-protein CCs:
PercSingleProt <- round(CCstatsOut$N_singleProtCC/totCCs*100, digits=2)
PercSingleProt
# View table of CC size distribution
CCstatsOut$NproteinsDistribution
# Plot CC size distribution
plot(factor(CCstatsOut$NproteinsDistribution$N_proteins
, levels=c("1","2", "3", "4", "5", "6", "7", "8", "9", "10", ">10"))
, as.numeric(as.vector(CCstatsOut$NproteinsDistribution$N_CC))
, type="s"
, xlab="N_proteins"
, ylab="N_CCs")
peptideStatsOut <- peptideStats(incM=incM)
cc.peptides.incM <- CC.composition(cc.multProteins, incM=incM)
exprTranscriptsFile <- system.file( "extdata"
, "ExpressedTranscripts.txt"
, package = "CCs4prot"
, mustWork = TRUE)
transcriptToProteinFile <- system.file( "extdata"
, "proteinToTranscript"
, package = "CCs4prot"
, mustWork = TRUE)
# Perform filtering
incM_filtered <- postHocFilter(incM
, exprTranscriptsFile=exprTranscriptsFile
, transcriptToProteinFile=transcriptToProteinFile
, tagContam="Contam"
, remove = "sharedOnly")
incM_filtered_reduced <- reduceIncM(incM_filtered)
#Calculate the adjacency matrix describing protein-to-protein connections by shared peptides.
adjM_filtered <- getAdjM(incM_filtered_reduced)
multProteinCC_filtered <- getCC(adjM_filtered)
# Save the list of vectors enumerating protein members in each connected
# component in the object cc.multProteins_filtered
cc.multProteins_filtered <- multProteinCC_filtered$ccs
# Calculate CCs size and % of single- vs multi-protein CCs obtained after transcriptome-informed filtering
CCstatsOut_filtered <- CC.stats(incM = incM_filtered
, cc.proteins = multProteinCC_filtered$ccs
, reducedIncM = T)
# Number of single-protein CCs:
CCstatsOut_filtered$N_singleProtCC
# Number of multi-protein CCs
CCstatsOut_filtered$N_multiProtCC
# Total number of CCs
totCCs_filtered <- CCstatsOut_filtered$N_singleProtCC+CCstatsOut_filtered$N_multiProtCC
totCCs_filtered
# Percentage of single-protein CCs:
PercSingleProt_filtered <- round(CCstatsOut_filtered$N_singleProtCC/totCCs_filtered*100, digits=2)
PercSingleProt_filtered
# View table of CC size distribution
CCstatsOut_filtered$NproteinsDistribution
# Plot CC size distribution
plot(factor(CCstatsOut_filtered$NproteinsDistribution$N_proteins
, levels=c("1","2", "3", "4", "5", "6", "7", "8", "9", "10", ">10"))
, as.numeric(as.vector(CCstatsOut_filtered$NproteinsDistribution$N_CC))
, type="s"
, xlab="N_proteins"
, ylab="N_CCs")
peptideStatsOut_filtered <- peptideStats(incM=incM_filtered)
comp <- as.data.frame(cbind(as.character(as.vector(c("before_filter"
, "after_filter")))
, as.numeric(as.vector(c(peptideStatsOut$nbShared
, peptideStatsOut_filtered$nbShared)))))
colnames(comp) <- c("Filter", "Perc_sharedPeptides")
comp
ggplot(data=comp, aes(x=as.factor(Filter), y=as.numeric(as.vector(Perc_sharedPeptides)))) +
geom_bar(stat="identity") +
theme_classic() +
xlab("") +
ylab("% shared peptides") +
ylim(0,100) +
coord_flip() +
geom_text(aes(label=as.numeric(as.vector(Perc_sharedPeptides))), hjust=1.5, color="white", size=4)
ymax <- max(max(CCstatsOut$NproteinsDistribution$N_CC)
, max(CCstatsOut_filt$NproteinsDistribution$N_CC))
exprTranscriptsFile <- system.file( "extdata"
, "ExpressedTranscripts.txt"
, package = "CCs4prot"
, mustWork = TRUE)
transcriptToProteinFile <- system.file( "extdata"
, "proteinToTranscript"
, package = "CCs4prot"
, mustWork = TRUE)
# Perform filtering
incM_filt <- postHocFilter(incM
, exprTranscriptsFile=exprTranscriptsFile
, transcriptToProteinFile=transcriptToProteinFile
, tagContam="Contam"
, remove = "sharedOnly")
incM_filt_reduced <- reduceIncM(incM_filt)
# Calculate the adjacency matrix describing protein-to-protein connections
adjM_filt <- getAdjM(incM_filt_reduced)
dim(adjM_filt) # check the size of the adjacency matrix
# Generate a graph of protein-to-protein connections by shared peptides and
# calculate its connected components (i.e. sets of proteins connected by shared
#peptides
multProteinCC_filt <- getCC(adjM_filt)
# Save the list of vectors enumerating protein members in each connected
# component in the object cc.multProteins_filtered
cc.multProteins_filt <- multProteinCC_filt$ccs
# Calculate CCs size and % of single- vs multi-protein CCs obtained after
# transcriptome-informed filtering
CCstatsOut_filt <- CC.stats(incM = incM_filt
, cc.proteins = multProteinCC_filt$ccs
, reducedIncM = T)
ymax <- max(max(CCstatsOut$NproteinsDistribution$N_CC)
, max(CCstatsOut_filt$NproteinsDistribution$N_CC))
ymax
max(CCstatsOut$NproteinsDistribution$N_CC
)
CCstatsOut$NproteinsDistribution$N_CC
ymax <- max(max(as.numeric(as.vector(CCstatsOut$NproteinsDistribution$N_CC)))
,max(as.numeric(as.vector(CCstatsOut_filt$NproteinsDistribution$N_CC))))
ymax
plot(factor(CCstatsOut$NproteinsDistribution$N_proteins
, levels=c("1","2", "3", "4", "5", "6", "7", "8", "9", "10", ">10"))
, as.numeric(as.vector(CCstatsOut$NproteinsDistribution$N_CC))
, type="s"
, xlab="N_proteins"
, ylab="N_CCs"
, ylim(0, ymax)
, main="before filtering")
plot(factor(CCstatsOut_filt$NproteinsDistribution$N_proteins
, levels=c("1","2", "3", "4", "5", "6", "7", "8", "9", "10", ">10"))
, as.numeric(as.vector(CCstatsOut_filt$NproteinsDistribution$N_CC))
, type="s"
, xlab="N_proteins"
, ylab="N_CCs"
, ylim(0, ymax)
, main="after filtering")
is(ymax)
ymax
help(plot)
library(CCs4prot)
library(igraph)
library(ggplot2)
incM_filename <- system.file( "extdata"
, "incM_Example"
, package = "CCs4prot"
, mustWork = TRUE)
rownames_filename <- system.file( "extdata"
, "peptideIDs_incM_Example"
, package = "CCs4prot"
, mustWork = TRUE)
colnames_filename <- system.file( "extdata"
, "proteinIDs_incM_Example"
, package = "CCs4prot"
, mustWork = TRUE)
incM <- readIncM(incM_filename=incM_filename
, colnames_filename=colnames_filename
, rownames_filename=rownames_filename)
tail(colnames(incM))
library(devtools)
library(devtools)
devtools::document()
devtools::build()
devtools::install()
